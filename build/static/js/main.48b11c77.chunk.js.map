{"version":3,"sources":["component/table.js","App.js","serviceWorker.js","index.js"],"names":["tasksObj","mentorsTable","splice","uuidv1","require","Table","_ref","selectedOption","studentsTasksArr","mentorWithStudents","firstRow","push","react_default","a","createElement","key","map","item","value","name","studs","studentName","href","studentGithubLink","target","rel","keys","Object","i","length","tableData","taskName","j","currentTask","currentTaskStatus","style","backgroundColor","className","options","elem","label","App","state","JSON","parse","localStorage","getItem","handleChange","_this","setState","serialObj","stringify","setItem","this","react_select_esm","onChange","table","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.48b11c77.chunk.js","sourcesContent":["import React from 'react';\r\nimport mentorsTable from \"../mentorsTable/data\";\r\n\r\nlet tasksObj = mentorsTable.splice(0, 1)[0];\r\nconst uuidv1 = require('uuid/v1');\r\n\r\nconst Table = ({selectedOption}) => {\r\n\r\n    if (selectedOption !== null) {\r\n        const studentsTasksArr = [];\r\n        let mentorWithStudents = \" \";\r\n        const firstRow = [];\r\n        \r\n        \r\n        \r\n        firstRow.push((<th key=\"emptyCell\"></th>));\r\n        mentorsTable.map((item) => {\r\n            if (selectedOption.value === item.name) {\r\n                mentorWithStudents = item;\r\n            }\r\n        })\r\n        mentorWithStudents.studs.map((item) => {\r\n            const studentName = <th key={item.name}><a href={item.studentGithubLink}\r\n            target=\"_blank\" rel=\"noopener noreferrer\">{item.name}</a></th>;                                                    \r\n            \r\n            firstRow.push(studentName);\r\n        });\r\n        let keys = Object.keys(tasksObj);\r\n        studentsTasksArr.push(<tr key = {uuidv1()}>{firstRow}</tr>);\r\n        for (let i = 0; i < keys.length; i++) {\r\n\r\n            let tableData = [];\r\n\r\n            const taskName = <td key = {keys[i]}><a key = {keys[i] + \"href\"} href={tasksObj[keys[i]][1]}\r\n            target=\"_blank\" rel=\"noopener noreferrer\">{keys[i]}</a></td>;\r\n\r\n            tableData.push(taskName);\r\n            for (let j = 0; j < mentorWithStudents.studs.length; j++) {\r\n                let currentTask = keys[i];\r\n                let currentTaskStatus = tasksObj[keys[i]][0];\r\n                if (mentorWithStudents.studs[j][currentTask] > 0){\r\n                    \r\n                    tableData.push(<td key = {uuidv1()} style={{backgroundColor: \"lightgreen\"}}></td>);\r\n                } \r\n                else\r\n                if (currentTaskStatus === \"Checked\"){\r\n                    tableData.push(<td key = {uuidv1()} style={{backgroundColor: \"crimson\"}}></td>);\r\n                }\r\n                else\r\n                if (currentTaskStatus === \"Checking\"){\r\n                    tableData.push(<td key = {uuidv1()} style={{backgroundColor: \"lightpink\"}}></td>);\r\n                }\r\n                else\r\n                if (currentTaskStatus === \"In Progress\"){\r\n                    tableData.push(<td key = {uuidv1()} style={{backgroundColor: \"yellow\"}}></td>);\r\n                }\r\n                else\r\n                if (currentTaskStatus === \"ToDo\"){\r\n                    tableData.push(<td key = {uuidv1()} style={{backgroundColor: \"grey\"}}></td>);\r\n                }\r\n            }\r\n\r\n            studentsTasksArr.push(<tr key = {uuidv1()}>{tableData}</tr>);\r\n        }\r\n\r\n        return <table\r\n            className=\"tableDashboard\">\r\n            <tbody key = {uuidv1()}>{studentsTasksArr}</tbody>\r\n        </table>\r\n    }\r\n    else return null\r\n};\r\n\r\nexport default Table","import React, { Component } from 'react';\nimport Select from 'react-select';\nimport './App.css';\nimport mentorsTable from \"./mentorsTable/data\";\nimport Table from './component/table';\nimport './component/style.css';\n\n\nconst options = mentorsTable.map(function (elem) {\n  const objElem = {\n      value: elem.name, label: elem.name\n  };\n  return objElem\n\n});\nclass App extends Component {\n  \n  state = {\n    selectedOption: JSON.parse(localStorage.getItem(\"mentor\"))\n  }\n  handleChange = (selectedOption) => {\n    this.setState({ selectedOption });\n    let serialObj = JSON.stringify(selectedOption); \n    localStorage.setItem(\"mentor\", serialObj)\n  }\n  render() {\n    const { selectedOption } = this.state;\n    \n    return (\n      <div className=\"content\">\n      <h2>Select your Github name</h2>\n      <Select\n          className=\"select\"\n          value={selectedOption}\n          onChange={this.handleChange}\n          options={options}\n      />\n      <Table\n          selectedOption={selectedOption}\n      />\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}